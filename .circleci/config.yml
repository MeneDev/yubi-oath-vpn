version: 2.1
jobs:
  create_builder:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: builder-{{ checksum "builder2/Dockerfile" }}
          paths:
              - /tmp/docker_pushed
      - run:
          name: Build and push image if builder/Dockerfile has changed
          command:  |
            docker pull menedev/yubi-oath-vpn-builder:latest
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            if [ ! -f /tmp/docker_pushed ]; then
              docker build -f builder2/Dockerfile -t menedev/yubi-oath-vpn-builder:latest .
              docker push menedev/yubi-oath-vpn-builder:latest
              echo 1 > /tmp/docker_pushed
            fi
            docker tag menedev/yubi-oath-vpn-builder:latest menedev/yubi-oath-vpn-builder:$CIRCLE_SHA1
            docker push menedev/yubi-oath-vpn-builder:$CIRCLE_SHA1
      - save_cache:
          key: builder-{{ checksum "builder2/Dockerfile" }}
          paths:
              - /tmp/docker_pushed
  build:
    docker:
      - image: menedev/yubi-oath-vpn-builder:$CIRCLE_SHA1
      
    working_directory: /go/src/github.com/MeneDev/yubi-oath-vpn
    environment:
      - DEP_VERSION: 0.5.0
      - GITHUB_USER: MeneDev
      - GITHUB_PROJECT: yubi-oath-vpn
      - GOCACHE: "/tmp/go/cache"
    steps:
      - checkout
      - restore_cache:
          key: gopkg-linux-windows-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/MeneDev/yubi-oath-vpn/vendor
              - /tmp/go/cache
      - run:
          name: Download and build libraries
          command: |
            if [ ! -d ./vendor ]; then
                /go/bin/dep ensure
                find vendor/ -maxdepth 3 -mindepth 3 -exec bash -c 'cd $0 && go build  ./...' {} \;
                CGO_LDFLAGS_ALLOW='.*' CGO_CFLAGS_ALLOW='.*' CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_ENABLED=1 GOOS=windows GOARCH=amd64 PKG_CONFIG_PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig find vendor/ -maxdepth 3 -mindepth 3 -exec bash -c 'cd $0 && go build  ./...' {} \;
            fi
      - save_cache:
          key: gopkg-linux-windows-{{ checksum "Gopkg.lock" }}
          paths:
              - ./vendor
              - /tmp/go/cache

      - run:
          name: Build project for linux
          command: |
            tag="$(semantics --output-tag --dry-run)"
            go build -mod=mod -o release/yubi-oath-vpn-linux_amd64 -ldflags="-s -w -X \"main.Version=${tag:-not a release}\" -X \"main.BuildDate=$(date --utc)\" -X \"main.BuildNumber=$CIRCLE_BUILD_NUM\" -X \"main.BuildCommit=$CIRCLE_SHA1\"" -v github.com/MeneDev/yubi-oath-vpn/cmd/yubi-oath-vpn
      - run:
          name: Build project for windows
          command: |
            tag="$(semantics --output-tag --dry-run)"
            CGO_LDFLAGS_ALLOW='.*' CGO_CFLAGS_ALLOW='.*' CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_ENABLED=1 GOOS=windows GOARCH=amd64 PKG_CONFIG_PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig go build -mod=mod -o release/windows/yubi-oath-vpn-win_amd64.exe -ldflags="-s -w -X \"main.Version=${tag:-not a release}\" -X \"main.BuildDate=$(date --utc)\" -X \"main.BuildNumber=$CIRCLE_BUILD_NUM\" -X \"main.BuildCommit=$CIRCLE_SHA1\"" -v github.com/MeneDev/yubi-oath-vpn/cmd/yubi-oath-vpn

      - run: release/yubi-oath-vpn-linux_amd64 --version

      - run: cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/{iconv.dll,libatk-1.0-0.dll,libbz2-1.dll,libcairo-2.dll,libcairo-gobject-2.dll,libepoxy-0.dll,libexpat-1.dll,libffi-6.dll,libfontconfig-1.dll,libfreetype-6.dll,libgcc_s_seh-1.dll,libgdk-3-0.dll,libgdk_pixbuf-2.0-0.dll,libgio-2.0-0.dll,libglib-2.0-0.dll,libgmodule-2.0-0.dll,libgobject-2.0-0.dll,libgtk-3-0.dll,libintl-8.dll,libpango-1.0-0.dll,libpangocairo-1.0-0.dll,libpangowin32-1.0-0.dll,libpcre-1.dll,libpixman-1-0.dll,libpng16-16.dll,libwinpthread-1.dll,zlib1.dll} release/windows

      - run: find 3rd-party-licenses -mindepth 1 -exec basename {} .txt \; -exec echo  \; -exec cat {} \; -exec echo -e '\n\n\n\n' \; > release/3rd-party-licenses.txt
      - run: find 3rd-party-licenses -mindepth 1 -exec basename {} .txt \; -exec echo  \; -exec cat {} \; -exec echo -e '\n\n\n\n' \; > release/windows/3rd-party-licenses.txt

      - persist_to_workspace:
          root: .
          paths:
            - release

  release:
    docker:
      - image: menedev/yubi-oath-vpn-builder:$CIRCLE_SHA1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Release new version if applicable
          command: |
            tag="$(semantics --output-tag --dry-run)"
            if [ ! -z "$tag" ]; then
              zip -jm /tmp/workspace/release/yubi-oath-vpn-win_amd64.zip /tmp/workspace/release/windows/*
              rm -rf /tmp/workspace/release/windows
              ghr -t "$GITHUB_TOKEN" -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" --replace "$tag" /tmp/workspace/release/
            else
              zip -jm /tmp/workspace/release/yubi-oath-vpn-win_amd64.zip /tmp/workspace/release/windows/*
              rm -rf /tmp/workspace/release/windows
              ghr -prerelease -t "$GITHUB_TOKEN" -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" --replace "snapshot" /tmp/workspace/release/
            fi
      
workflows:
  version: 2
  create_builder_and_release:
    jobs:
      - create_builder
      - build:
          requires:
              - create_builder
      - release:
          requires:
              - build
          filters:
            branches:
              only:
                - master